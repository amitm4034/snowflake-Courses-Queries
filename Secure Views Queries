/*

Secure Views:

Secure views are defined using the secure keyword with the standard DDL for views.
Unauthorized users will not be able to see the view definition using GET_DDL or DESC commands.
Both Regular and materialized views can become secure views.
Should be created when considering security or data privacy on the underlying table used in view definition.
Can be used to apply row-level security.

*/


-- Create Secure View
create or replace SECURE view DEMO_DB.PUBLIC.SECURE_VW_CUSTOMERS as
select C_NAME, C_ACCTBAL, C_NATIONKEY, C_MKTSEGMENT
from "DEMO_DB"."PUBLIC"."CUSTOMERS"
where C_MKTSEGMENT = 'FURNITURE';


-- Lets create a custom role 'ANALYST' which should not have access to the underlying data
create or replace role analyst;

-- Grant privileges of database, schema and views to ANALYST role
grant usage on database demo_db to role ANALYST;
grant usage on schema demo_db.public to role ANALYST;
grant select on demo_db.public.VW_CUSTOMERS to role ANALYST;
grant select on demo_db.public.SECURE_VW_CUSTOMERS to role ANALYST;
grant role ANALYST to user kashishgakkar;

-- Also, provide access to a warehouse
grant usage on warehouse compute_wh to role ANALYST;

-- Query on regular view using ACCOUNTADMIN and ANALYST roles - Look at the differences
-- ACCOUNTADMIN is the owner of views
-- ANALYST is the user of views which does not have access to underlying data
select *
from DEMO_DB.PUBLIC.VW_CUSTOMERS
where 1/iff(upper(C_MKTSEGMENT) = 'MACHINERY', 0, 1) = 1;

-- Query on secure view using ANALYST role
select *
from DEMO_DB.PUBLIC.SECURE_VW_CUSTOMERS
where 1/iff(upper(C_MKTSEGMENT) = 'MACHINERY', 0, 1) = 1;

-- Assume role ANALYST
use role ANALYST;
use database DEMO_DB;
use schema PUBLIC;

use role ACCOUNTADMIN;

show views;

select get_ddl('VIEW','SECURE_VW_CUSTOMERS');
select get_ddl('VIEW','VW_CUSTOMERS');

-- Focus on below points
// By running, SHOW VIEWS command, ANALYST role does not have access to SECURE VIEW definition
// Looking at the Query profile, we can clearly observe that SECURE views does not evaluate 
//        the user query before authentication of the role/user
// Functions like GET_DDL does not work on secure views (except view owners)





